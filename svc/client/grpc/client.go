// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 72999ebd2f
// Version Date: Wed Mar 17 08:36:51 UTC 2021

// Package grpc provides a gRPC client for the Todo service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "todo"
	"todo/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.TodoServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var createtodoEndpoint endpoint.Endpoint
	{
		createtodoEndpoint = grpctransport.NewClient(
			conn,
			"todo.Todo",
			"CreateTodo",
			EncodeGRPCCreateTodoRequest,
			DecodeGRPCCreateTodoResponse,
			pb.CreateTodoResponse{},
			clientOptions...,
		).Endpoint()
	}

	var getallEndpoint endpoint.Endpoint
	{
		getallEndpoint = grpctransport.NewClient(
			conn,
			"todo.Todo",
			"GetAll",
			EncodeGRPCGetAllRequest,
			DecodeGRPCGetAllResponse,
			pb.GetAllResponse{},
			clientOptions...,
		).Endpoint()
	}

	var gettodoEndpoint endpoint.Endpoint
	{
		gettodoEndpoint = grpctransport.NewClient(
			conn,
			"todo.Todo",
			"GetTodo",
			EncodeGRPCGetTodoRequest,
			DecodeGRPCGetTodoResponse,
			pb.GetTodoResponse{},
			clientOptions...,
		).Endpoint()
	}

	var deletetodoEndpoint endpoint.Endpoint
	{
		deletetodoEndpoint = grpctransport.NewClient(
			conn,
			"todo.Todo",
			"DeleteTodo",
			EncodeGRPCDeleteTodoRequest,
			DecodeGRPCDeleteTodoResponse,
			pb.DeleteTodoResponse{},
			clientOptions...,
		).Endpoint()
	}

	var updatetodoEndpoint endpoint.Endpoint
	{
		updatetodoEndpoint = grpctransport.NewClient(
			conn,
			"todo.Todo",
			"UpdateTodo",
			EncodeGRPCUpdateTodoRequest,
			DecodeGRPCUpdateTodoResponse,
			pb.UpdateTodoResponse{},
			clientOptions...,
		).Endpoint()
	}

	endpoints := svc.NewEndpoints()
	endpoints.CreateTodoEndpoint = createtodoEndpoint
	endpoints.GetAllEndpoint = getallEndpoint
	endpoints.GetTodoEndpoint = gettodoEndpoint
	endpoints.DeleteTodoEndpoint = deletetodoEndpoint
	endpoints.UpdateTodoEndpoint = updatetodoEndpoint

	return endpoints, nil
}

// GRPC Client Decode

// DecodeGRPCCreateTodoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC createtodo reply to a user-domain createtodo response. Primarily useful in a client.
func DecodeGRPCCreateTodoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.CreateTodoResponse)
	return reply, nil
}

// DecodeGRPCGetAllResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getall reply to a user-domain getall response. Primarily useful in a client.
func DecodeGRPCGetAllResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetAllResponse)
	return reply, nil
}

// DecodeGRPCGetTodoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC gettodo reply to a user-domain gettodo response. Primarily useful in a client.
func DecodeGRPCGetTodoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetTodoResponse)
	return reply, nil
}

// DecodeGRPCDeleteTodoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC deletetodo reply to a user-domain deletetodo response. Primarily useful in a client.
func DecodeGRPCDeleteTodoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.DeleteTodoResponse)
	return reply, nil
}

// DecodeGRPCUpdateTodoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updatetodo reply to a user-domain updatetodo response. Primarily useful in a client.
func DecodeGRPCUpdateTodoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UpdateTodoResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCCreateTodoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain createtodo request to a gRPC createtodo request. Primarily useful in a client.
func EncodeGRPCCreateTodoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.CreateTodoRequest)
	return req, nil
}

// EncodeGRPCGetAllRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getall request to a gRPC getall request. Primarily useful in a client.
func EncodeGRPCGetAllRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetAllRequest)
	return req, nil
}

// EncodeGRPCGetTodoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain gettodo request to a gRPC gettodo request. Primarily useful in a client.
func EncodeGRPCGetTodoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetTodoRequest)
	return req, nil
}

// EncodeGRPCDeleteTodoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain deletetodo request to a gRPC deletetodo request. Primarily useful in a client.
func EncodeGRPCDeleteTodoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DeleteTodoRequest)
	return req, nil
}

// EncodeGRPCUpdateTodoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updatetodo request to a gRPC updatetodo request. Primarily useful in a client.
func EncodeGRPCUpdateTodoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdateTodoRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
