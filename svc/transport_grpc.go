// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 72999ebd2f
// Version Date: Wed Mar 17 08:36:51 UTC 2021

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "todo"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC TodoServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.TodoServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// todo

		createtodo: grpctransport.NewServer(
			endpoints.CreateTodoEndpoint,
			DecodeGRPCCreateTodoRequest,
			EncodeGRPCCreateTodoResponse,
			serverOptions...,
		),
		getall: grpctransport.NewServer(
			endpoints.GetAllEndpoint,
			DecodeGRPCGetAllRequest,
			EncodeGRPCGetAllResponse,
			serverOptions...,
		),
		gettodo: grpctransport.NewServer(
			endpoints.GetTodoEndpoint,
			DecodeGRPCGetTodoRequest,
			EncodeGRPCGetTodoResponse,
			serverOptions...,
		),
		deletetodo: grpctransport.NewServer(
			endpoints.DeleteTodoEndpoint,
			DecodeGRPCDeleteTodoRequest,
			EncodeGRPCDeleteTodoResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the TodoServer interface
type grpcServer struct {
	createtodo grpctransport.Handler
	getall     grpctransport.Handler
	gettodo    grpctransport.Handler
	deletetodo grpctransport.Handler
}

// Methods for grpcServer to implement TodoServer interface

func (s *grpcServer) CreateTodo(ctx context.Context, req *pb.CreateTodoRequest) (*pb.CreateTodoResponse, error) {
	_, rep, err := s.createtodo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.CreateTodoResponse), nil
}

func (s *grpcServer) GetAll(ctx context.Context, req *pb.GetAllRequest) (*pb.GetAllResponse, error) {
	_, rep, err := s.getall.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetAllResponse), nil
}

func (s *grpcServer) GetTodo(ctx context.Context, req *pb.GetTodoRequest) (*pb.GetTodoResponse, error) {
	_, rep, err := s.gettodo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetTodoResponse), nil
}

func (s *grpcServer) DeleteTodo(ctx context.Context, req *pb.DeleteTodoRequest) (*pb.DeleteTodoResponse, error) {
	_, rep, err := s.deletetodo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.DeleteTodoResponse), nil
}

// Server Decode

// DecodeGRPCCreateTodoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC createtodo request to a user-domain createtodo request. Primarily useful in a server.
func DecodeGRPCCreateTodoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateTodoRequest)
	return req, nil
}

// DecodeGRPCGetAllRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getall request to a user-domain getall request. Primarily useful in a server.
func DecodeGRPCGetAllRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetAllRequest)
	return req, nil
}

// DecodeGRPCGetTodoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC gettodo request to a user-domain gettodo request. Primarily useful in a server.
func DecodeGRPCGetTodoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetTodoRequest)
	return req, nil
}

// DecodeGRPCDeleteTodoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC deletetodo request to a user-domain deletetodo request. Primarily useful in a server.
func DecodeGRPCDeleteTodoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.DeleteTodoRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCCreateTodoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain createtodo response to a gRPC createtodo reply. Primarily useful in a server.
func EncodeGRPCCreateTodoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.CreateTodoResponse)
	return resp, nil
}

// EncodeGRPCGetAllResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getall response to a gRPC getall reply. Primarily useful in a server.
func EncodeGRPCGetAllResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetAllResponse)
	return resp, nil
}

// EncodeGRPCGetTodoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain gettodo response to a gRPC gettodo reply. Primarily useful in a server.
func EncodeGRPCGetTodoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetTodoResponse)
	return resp, nil
}

// EncodeGRPCDeleteTodoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain deletetodo response to a gRPC deletetodo reply. Primarily useful in a server.
func EncodeGRPCDeleteTodoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.DeleteTodoResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
